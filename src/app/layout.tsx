// app/layout.tsx
"use client";
import type { Metadata } from "next";
import { NavBar } from "./components/Navbar";
import "./globals.css";
import { Instrument_Sans, Instrument_Serif } from "next/font/google";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtoolsPanel } from "@tanstack/react-query-devtools";
import { useState } from "react";

const queryClient = new QueryClient();

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// Font imports
const instrumentSans = Instrument_Sans({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-instrument-sans",
  fallback: ["system-ui", "sans-serif"],
  preload: true,
  adjustFontFallback: true,
});

const instrumentSerif = Instrument_Serif({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-instrument-serif",
  weight: ["400"],
  fallback: ["system-ui", "sans-serif"],
  preload: true,
  adjustFontFallback: true,
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <html
      lang="en"
      className={`${instrumentSans.variable} ${instrumentSerif.variable}`}
    >
      <QueryClientProvider client={queryClient}>
        <body className="w-screen scale-90 max-h-screen">
          <NavBar />
          <button onClick={() => setIsOpen(!isOpen)}>{`${
            isOpen ? "Close" : "Open"
          } the devtools panel`}</button>
          {isOpen && (
            <ReactQueryDevtoolsPanel onClose={() => setIsOpen(false)} />
          )}
          <div>{children}</div>
        </body>
      </QueryClientProvider>
    </html>
  );
}
